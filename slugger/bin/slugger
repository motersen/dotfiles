#!/usr/bin/env gosh

(define (slugify string)
	(let ((dash '(#\space #\tab #\newline #\: #\_ #\-))
				(substitute '((#xc4 (#\A))
											(#xd6 (#\O))
											(#xdc (#\U))
											(#xdf (#\s #\s))
											(#xe4 (#\a))
											(#xf6 (#\o))
											(#xf8 (#\o))
											(#xfc (#\u)))))
		(let slugify ((chars (string->list string))
									(slug (list)))
			(if (null? chars)
					(list->string (reverse slug))
					(let ((c (car chars))
								(codepoint (char->integer (car chars))))
						(cond
						 ((or (<= #x30 codepoint #x39)	; digit
									(<= #x61 codepoint #x7a)) ; lowercase ascii letter
							(slugify (cdr chars) (cons c slug)))
						 ((<= #x41 codepoint #x5a)	; uppercase ascii letter
							(slugify (cdr chars) (cons (char-downcase c) slug)))
						 ((memv c dash)
							(if (eqv? #\- (car slug)) ; no consecutive dashes
									(slugify (cdr chars) slug)
									(slugify (cdr chars) (cons #\- slug))))
						 ((assv codepoint substitute) =>
							(lambda (pair)
								(slugify (cdr chars) (append (reverse (cadr pair)) slug))))
						 (else
							(slugify (cdr chars) slug))))))))

(define (fold-left proc p rest)
	(if (null? rest)
			p
			(fold-left proc (proc p (car rest)) (cdr rest))))

(define (read-all lines)
	(let ((line (read-line)))
		(if (eof-object? line)
				(fold-left string-append "" (reverse lines))
				(read-all (cons line lines)))))

(define (main args)
	(define (display-slug slug)
		(display slug)
		(newline))
	(if (null? (cdr args))
			(display-slug (slugify (read-all (list))))
			(for-each display-slug
								(map slugify (cdr args))))
	0)
